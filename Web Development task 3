<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic Tac Toe</title>
    <style>
        .container {
            text-align: center;
        }

        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-gap: 5px;
            margin: 20px auto;
            border: 2px solid black;
            width: 300px;
            height: 300px;
        }

        .cell {
            width: 100px;
            height: 100px;
            background-color: #ccc;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            cursor: pointer;
        }

        .cell:hover {
            background-color: #ddd;
        }

        .status {
            margin-top: 20px;
            font-size: 1.5em;
        }

        .restart-btn {
            font-size: 1em;
            padding: 10px 20px;
            cursor: pointer;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            margin-top: 20px;
        }

        .restart-btn:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Tic Tac Toe</h1>
        <div id="game-board" class="game-board">
            <div class="cell" data-cell-index="0"></div>
            <div class="cell" data-cell-index="1"></div>
            <div class="cell" data-cell-index="2"></div>
            <div class="cell" data-cell-index="3"></div>
            <div class="cell" data-cell-index="4"></div>
            <div class="cell" data-cell-index="5"></div>
            <div class="cell" data-cell-index="6"></div>
            <div class="cell" data-cell-index="7"></div>
            <div class="cell" data-cell-index="8"></div>
        </div>
        <div id="status" class="status"></div>
        <button id="restart-btn" class="restart-btn">Restart Game</button>
        <button id="play-ai-btn" class="restart-btn">Play Against AI</button>
    </div>
    <script>
        const X_CLASS = 'x';
        const O_CLASS = 'o';
        const WINNING_COMBINATIONS = [
            [0, 1, 2],
            [3, 4, 5],
            [6, 7, 8],
            [0, 3, 6],
            [1, 4, 7],
            [2, 5, 8],
            [0, 4, 8],
            [2, 4, 6]
        ];

        const cells = document.querySelectorAll('.cell');
        const statusDisplay = document.getElementById('status');
        const restartButton = document.getElementById('restart-btn');
        const playAiButton = document.getElementById('play-ai-btn');
        let currentPlayer = X_CLASS;
        let gameActive = true;
        let gameState = ['', '', '', '', '', '', '', '', ''];
        let againstAi = false;

        // Function to handle a player clicking a cell
        function handleCellClick(clickedCell, clickedCellIndex) {
            if (gameState[clickedCellIndex] !== '' || !gameActive) return;

            gameState[clickedCellIndex] = currentPlayer;
            clickedCell.innerText = currentPlayer;

            if (checkWin(currentPlayer)) {
                endGame(false);
            } else if (isDraw()) {
                endGame(true);
            } else {
                if (againstAi && currentPlayer === O_CLASS) {
                    aiMove();
                } else {
                    swapTurns();
                }
            }
        }

        // Function to check if the current player has won
        function checkWin(player) {
            return WINNING_COMBINATIONS.some(combination => {
                return combination.every(index => {
                    return gameState[index] === player;
                });
            });
        }

        // Function to check if the game is a draw
        function isDraw() {
            return gameState.every(cell => cell !== '') && !checkWin(X_CLASS) && !checkWin(O_CLASS);
        }

        // Function to end the game
        function endGame(draw) {
            if (draw) {
                statusDisplay.innerText = 'Draw!';
            } else {
                statusDisplay.innerText = `${currentPlayer} Wins!`;
            }
            gameActive = false;
        }

        // Function to swap turns between X and O
        function swapTurns() {
            currentPlayer = currentPlayer === X_CLASS ? O_CLASS : X_CLASS;
            statusDisplay.innerText = `${currentPlayer}'s turn`;
        }

        // Function to make AI move
        function aiMove() {
            // Simple AI logic: Randomly choose an empty cell
            let emptyCells = [];
            gameState.forEach((cell, index) => {
                if (cell === '') {
                    emptyCells.push(index);
                }
            });
            const randomIndex = Math.floor(Math.random() * emptyCells.length);
            const cellIndex = emptyCells[randomIndex];
            gameState[cellIndex] = currentPlayer;
            cells[cellIndex].innerText = currentPlayer;

            if (checkWin(currentPlayer)) {
                endGame(false);
            } else if (isDraw()) {
                endGame(true);
            } else {
                swapTurns();
            }
        }

        // Function to restart the game
        function restartGame() {
            gameActive = true;
            currentPlayer = X_CLASS;
            statusDisplay.innerText = `${currentPlayer}'s turn`;
            gameState = ['', '', '', '', '', '', '', '', ''];
            cells.forEach(cell => {
                cell.innerText = '';
            });
        }

        // Event listeners
        cells.forEach(cell => {
            cell.addEventListener('click', () => {
                const clickedCellIndex = cell.getAttribute('data-cell-index');
                handleCellClick(cell, clickedCellIndex);
            });
        });

        restartButton.addEventListener('click', restartGame);

        playAiButton.addEventListener('click', () => {
            againstAi = true;
            restartGame();
            statusDisplay.innerText = `${currentPlayer}'s turn (You)`;
            if (currentPlayer === O_CLASS) {
                aiMove(); // Make AI move if AI starts the game
            }
        });

        // Initial status display
        statusDisplay.innerText = `${currentPlayer}'s turn`;
    </script>
</body>
</html>
